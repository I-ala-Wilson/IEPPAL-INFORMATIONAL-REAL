---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro"; // Adjusted path for GitHub Pages
import Container from "../components/container.astro"; // Adjusted path for GitHub Pages
import Layout from "../layouts/Layout.astro"; // Adjusted path for GitHub Pages
import Sectionhead from "../components/sectionhead.astro"; // Adjusted path for GitHub Pages

const timelineSteps = [
  { year: "Understanding the Problem", description: "IEPPAL wants to hear from as many industry members as we can prior to delving deep into building the software to ensure that we deliver the best product we can" },
  { year: "Finished Creation of MVP", description: "Launch of first product prototype and begin testing for feedback." },
  { year: "Back to the Drawing Board", description: "Tweak anything that we need to improve to deliver the best possible support to students." },
  { year: "Takeoff", description: "Begin first formal launch of IEPPAL technology in schools that are interested." },
  { year: "Drawing Board Revisited", description: "Refine your solution." },
  { year: "Project Success", description: "IEPPAL Integration in Educational Institutions Worldwide." }
];
---

<Layout title="Our Vision">
  <Container>
    <Sectionhead>
      <Fragment slot="title" class="fade-in-section">Our Vision</Fragment>
      <Fragment slot="desc" class="fade-in-section">Where do we see ourselves in the future?</Fragment>
    </Sectionhead>

    <div class="timeline">
      <div class="timeline-line">
        <div class="timeline-progress"></div>
      </div>
      {timelineSteps.map((step, index) => (
        <div class="timeline-step fade-in-section" data-step={index}>
          <div class="timeline-dot"></div>
          <div class="timeline-content">
            <h3 class="text-xl font-bold">{step.year}</h3>
            <p>
              {index === 0 ? (
                <>
                  <span class="highlight">IEPPAL wants to hear from as many stakeholders as possible</span> to ensure the product we deliver solves your problem.
                </>
              ) : (
                step.description
              )}
            </p>
          </div>
          {index === 0 && (
            <div class="current-marker">
              <span class="web-text">Where we are</span>
              <span class="mobile-text">Now</span>
              <div class="arrow"></div>
            </div>
          )}
        </div>
      ))}
    </div>
  </Container>
</Layout>

<style>
  .timeline {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px 0;
  }
  .timeline-line {
    position: absolute;
    left: 50%;
    top: 20px;
    bottom: 20px;
    width: 4px;
    background: #000;
    transform: translateX(-50%);
  }
  .timeline-progress {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 100%;
    background: #000;
    transform: scaleY(0);
    transform-origin: top;
    transition: transform 1s ease-out;
  }
  .timeline-step {
    position: relative;
    margin: 100px 0;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }
  .timeline-dot {
    position: absolute;
    left: 50%;
    width: 20px;
    height: 20px;
    background: #000000;
    border: 4px solid #000;
    border-radius: 50%;
    transform: translate(-50%, -50%);
    z-index: 2;
  }
  .timeline-dot::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 12px;
    height: 12px;
    background: #ffffff;
    border-radius: 50%;
    transform: translate(-50%, -50%);
  }
  .timeline-content {
    width: 45%;
    padding: 20px;
    background: #f0f0f0;
    border-radius: 8px;
  }
  .timeline-step:nth-child(odd) .timeline-content {
    margin-left: 55%;
  }
  .current-marker {
    position: absolute;
    left: calc(50% + 30px);
    background-color: #ff0000;
    color: #ffffff;
    padding: 10px 15px;
    border-radius: 5px;
    font-size: 14px;
    font-weight: bold;
    z-index: 3;
    top: calc(110% - 35px);
    transform: translateY(-50%);
  }
  .current-marker::before {
    content: '';
    position: absolute;
    left: -20px;
    top: 50%;
    width: 0;
    height: 0;
    border-top: 10px solid transparent;
    border-bottom: 10px solid transparent;
    border-right: 20px solid #ff0000;
    transform: translateY(-50%);
  }
  .highlight {
    background-color: #c1e08f;
    padding: 0px 2px;
    border-radius: 4px;
    line-height: 1.2;
  }
  .fade-in-section {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }
  .fade-in-section.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
  .mobile-text {
    display: none;
  }

  /* macOS (Desktop) view */
  @media (min-width: 769px) {
    .current-marker {
      padding: 10px 15px;
      top: calc(100% - 35px);
      transform: translateY(-50%);
    }
  }

  /* Mobile view */
  @media (max-width: 768px) {
    .timeline-line {
      left: 20px;
    }
    .timeline-step {
      margin: 100px 0;
    }
    .timeline-dot {
      left: 20px;
    }
    .timeline-content {
      width: calc(100% - 60px);
      margin-left: 40px !important;
    }
    .current-marker {
      position: absolute;
      left: 10px;
      top: 150px; /* Adjusted to move the "Now" marker up by 100px */
      padding: 10px 5px;
      width: 20px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 10px;
      transform: translateY(-50%);
      writing-mode: vertical-rl;
      text-orientation: mixed;
    }
    .current-marker::before {
      display: none;
    }
    .current-marker .web-text {
      display: none;
    }
    .current-marker .mobile-text {
      display: inline;
      transform: rotate(180deg);
    }
    .timeline-step:first-child {
      margin-top: -100px;
    }
  }
</style>

<script>
  function animateTimeline() {
    const timeline = document.querySelector('.timeline');
    const progress = document.querySelector('.timeline-progress');
    const steps = document.querySelectorAll('.timeline-step');
    const fadeInSections = document.querySelectorAll('.fade-in-section');
    let maxScroll = 0;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-visible');
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });

    fadeInSections.forEach((section) => observer.observe(section));

    function updateProgress() {
      const rect = timeline.getBoundingClientRect();
      const scrollPercentage = Math.min(
        Math.max((window.innerHeight - rect.top) / (rect.height - 40), 0),
        1
      );
      progress.style.transform = `scaleY(${Math.max(scrollPercentage, maxScroll)})`;
      maxScroll = Math.max(maxScroll, scrollPercentage);

      steps.forEach((step, index) => {
        const stepRect = step.getBoundingClientRect();
        const stepTop = stepRect.top + stepRect.height / 2;
        const progressBottom = rect.top + (rect.height - 40) * scrollPercentage + 20;
        
        if (stepTop < progressBottom) {
          step.classList.add('is-visible');
        }
      });
    }

    window.addEventListener('scroll', updateProgress);
    window.addEventListener('resize', updateProgress);
    updateProgress();
  }

  document.addEventListener('DOMContentLoaded', animateTimeline);
</script>
